name: CI

on:
  push:
    branches: ["main", "feature/**", "day*/**"]
    paths:
      - "**.go"
      - "**.mod"
      - "**.sum"
      - "charts/**"
      - "cmd/**"
      - "pkg/**"
      - ".github/workflows/ci.yml"
  # pull_request:
  #   branches: [ "main", "feature/**", "day*/**" ]
  #   paths:
  #     - '**.go'
  #     - '**.mod'
  #     - '**.sum'
  #     - 'charts/**'
  #     - 'cmd/**'
  #     - 'pkg/**'
  #     - '.github/workflows/ci.yml'

jobs:
  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"

      - name: Lint (go vet)
        run: go vet ./...

      - name: Lint (golangci-lint)
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  smoke-test:
    name: Run Smoke-Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"

      - name: Run Go tests
        run: go test ./cmd
  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: smoke-test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.2"

      - name: Install setup-envtest
        run: go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
      - name: Download envtest binaries
        id: setup-envtest
        run: |
          echo "KUBEBUILDER_ASSETS=$(setup-envtest use 1.30.0 -p path)" >> $GITHUB_ENV

      - name: Set version
        id: vars
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            APP_VERSION=${VERSION}
            DOCKER_TAG=${VERSION}
          else
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
            VERSION="0.1.0+${GITHUB_SHA}"
            APP_VERSION=${GITHUB_SHA}
            DOCKER_TAG="0.1.0-${SHORT_SHA}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
      - name: Build
        run: make build
      - name: Test
        run: make test-ci
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Build Docker image with version and latest tags
        run: |
          docker build \
            -t ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.docker_tag }} \
            -t ghcr.io/${{ github.repository }}:latest \
            .
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.docker_tag }}
      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.docker_tag }}
          docker push ghcr.io/${{ github.repository }}:latest
      - name: Package Helm chart
        run: |
          helm package charts/app --version ${{ steps.vars.outputs.version }} --app-version ${{ steps.vars.outputs.app_version }}
          mkdir -p chart-artifacts
          mv app-${{ steps.vars.outputs.version }}.tgz chart-artifacts/
      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: chart-artifacts/
